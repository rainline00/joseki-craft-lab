project:
  name: 将棋序盤知識整理アプリケーション開発
  milestones:
    - name: フェーズ1：環境セットアップ
      due_date: 2024-09-10
      issues:
        - title: プロジェクトの初期設定
          labels: [setup]
          description: |
            - [ ] GitHubリポジトリの作成
            - [ ] .gitignoreファイルの設定（Python, React, env用）
            - [ ] README.mdの作成
              - [ ] プロジェクト概要の記述
              - [ ] 技術スタックの一覧
              - [ ] セットアップ手順の概要
            - [ ] ライセンスファイルの追加
            - [ ] GitHubプロジェクトボードの初期設定

        - title: バックエンド環境のセットアップ
          labels: [backend, setup]
          description: |
            - [ ] Poetry用の仮想環境構築
            - [ ] 必要なPythonパッケージのインストール：
              - [ ] Strawberry GraphQL
              - [ ] PyMemgraph
              - [ ] Uvicorn（ASGI）
              - [ ] pytest（テスト用）
            - [ ] Memgraphのインストールと基本設定
            - [ ] やねうら王のセットアップ
              - [ ] ソースコードの取得
              - [ ] ビルド
              - [ ] 基本設定
            - [ ] バックエンドプロジェクトの基本構造作成：
              - [ ] schema.py：GraphQLスキーマ定義
              - [ ] resolvers/：GraphQLリゾルバー
              - [ ] models/：データモデル
              - [ ] services/：ビジネスロジック
              - [ ] tests/：テストディレクトリ
            - [ ] ASGIサーバー（Uvicorn）の設定ファイル作成

        - title: フロントエンド環境のセットアップ
          labels: [frontend, setup]
          description: |
            - [ ] Create React App で新規プロジェクト作成（TypeScript使用）
            - [ ] 必要なパッケージのインストール：
              - [ ] React Router
              - [ ] Apollo Client
              - [ ] Styled Components
            - [ ] フロントエンドプロジェクトの基本構造作成：
              - [ ] components/：再利用可能なUIコンポーネント
              - [ ] pages/：ルーティング用のページコンポーネント
              - [ ] hooks/：カスタムReactフック
              - [ ] utils/：ユーティリティ関数
              - [ ] types/：TypeScript型定義
              - [ ] tests/：テストディレクトリ
            - [ ] Apollo Clientの初期設定

        - title: 開発環境の最終調整
          labels: [setup]
          description: |
            - [ ] VSCodeの設定：
              - [ ] 推奨拡張機能リストの作成（.vscode/extensions.json）
              - [ ] ワークスペース設定ファイルの作成（.vscode/settings.json）
            - [ ] リンターとフォーマッターの設定：
              - [ ] Python: Black, isort
              - [ ] TypeScript/React: ESLint, Prettier
            - [ ] pre-commitフックの設定（リンティングと自動フォーマット）
            - [ ] README更新（開発環境セットアップ手順の詳細化）
            - [ ] バックエンドとフロントエンドの接続テスト
              - [ ] サンプルのGraphQLクエリとミューテーションの実装
              - [ ] フロントエンドからのAPI呼び出しテスト

    - name: フェーズ2：基本的なデータモデルとGraphQL API実装
      due_date: 2024-09-24
      issues:
        - title: Memgraphのスキーマ設計
          labels: [backend, database]
          description: |
            - [ ] 局面ノードの設計：
              - [ ] 一意識別子の定義
              - [ ] 駒の配置（SFEN形式）の保存方法
              - [ ] 手番の表現方法
              - [ ] 評価値の保存形式
            - [ ] 手順エッジの設計：
              - [ ] 開始局面IDと終了局面IDの関連付け
              - [ ] 指し手の表現方法
              - [ ] 出現頻度のカウント方法
            - [ ] 定跡メタデータの設計：
              - [ ] 定跡名の保存形式
              - [ ] 作成者情報の管理方法
              - [ ] 作成日時と最終更新日時の記録
            - [ ] PyMemgraphを使用した基本的なCRUD操作の実装
              - [ ] 局面の作成・読み取り・更新・削除
              - [ ] 手順の追加・更新
              - [ ] 定跡情報の管理
            - [ ] インデックス作成による検索最適化
            - [ ] テストデータの作成と投入

        - title: GraphQLスキーマの設計と実装
          labels: [backend, api]
          description: |
            - [ ] 型定義の実装：
              - [ ] Position型：局面情報
              - [ ] Move型：指し手情報
              - [ ] Joseki型：定跡情報
            - [ ] クエリの実装：
              - [ ] 単一局面取得
              - [ ] 複数局面取得（ページネーション）
              - [ ] 定跡検索
            - [ ] ミューテーションの実装：
              - [ ] 局面追加
              - [ ] 手順追加
              - [ ] 定跡作成・更新
            - [ ] サブスクリプションの実装（リアルタイム更新用）
            - [ ] GraphQLスキーマのドキュメント化

        - title: バックエンドのコア機能実装
          labels: [backend]
          description: |
            - [ ] kif形式パーサーの実装：
              - [ ] kifファイルの読み込みロジック
              - [ ] 棋譜データの解析
              - [ ] SFEN形式への変換機能
            - [ ] 局面管理サービスの実装：
              - [ ] 局面の追加機能
              - [ ] 局面の更新機能
              - [ ] 局面の削除機能
              - [ ] 類似局面検索ロジック
            - [ ] GraphQLリゾルバーの実装：
              - [ ] 各クエリに対応するリゾルバー
              - [ ] 各ミューテーションに対応するリゾルバー
              - [ ] データローダーの実装（N+1問題対策）
            - [ ] やねうら王との通信機能の基本実装：
              - [ ] USIプロトコルによる通信確立
              - [ ] 評価値の取得機能
              - [ ] 評価値の保存機能
            - [ ] ユニットテストの作成：
              - [ ] パーサーのテストケース作成と実行
              - [ ] サービスロジックのテストケース作成と実行
              - [ ] リゾルバーのテストケース作成と実行

        - title: フロントエンドの基本構造実装
          labels: [frontend]
          description: |
            - [ ] Apolloクライアントの詳細設定：
              - [ ] キャッシュの設定
              - [ ] エラーハンドリングの実装
            - [ ] ルーティングの実装：
              - [ ] メインページのルート設定
              - [ ] 局面詳細ページのルート設定
              - [ ] 定跡一覧ページのルート設定
            - [ ] 基本的なレイアウトコンポーネントの作成：
              - [ ] ヘッダーコンポーネント
              - [ ] フッターコンポーネント
              - [ ] サイドバー（ナビゲーション用）コンポーネント
            - [ ] GraphQLクエリ・ミューテーションの基本実装：
              - [ ] 局面データの取得クエリ
              - [ ] 定跡データの取得クエリ
            - [ ] 状態管理の基本設計：
              - [ ] Apolloクライアントの状態管理設定
              - [ ] 必要に応じてReact Contextの実装
            - [ ] コンポーネントのユニットテスト作成

        - title: 簡単なE2Eテストの実装
          labels: [testing]
          description: |
            - [ ] テスト環境のセットアップ：
              - [ ] Cypressのインストール
              - [ ] Cypressの基本設定
            - [ ] 基本的なE2Eテストシナリオの実装：
              - [ ] トップページの表示確認テスト
              - [ ] 局面データの取得と表示確認テスト
              - [ ] 簡単な操作（例：局面の切り替え）のテスト
            - [ ] CI/CD環境でのE2Eテスト実行設定
            - [ ] テスト結果レポートの設定

    - name: フェーズ3：MVP機能の実装
      due_date: 2024-10-15
      issues:
        - title: 棋譜入力機能の実装
          labels: [feature, backend, frontend]
          description: |
            バックエンド：
            - [ ] kif形式テキストのパース処理の完成
            - [ ] パースしたデータのMemgraphへの保存処理実装
            - [ ] バリデーションロジックの実装
            - [ ] 重複チェックと既存データとのマージロジック
            
            フロントエンド：
            - [ ] kif形式テキスト入力フォームの作成
            - [ ] ドラッグ＆ドロップによるファイルアップロード機能
            - [ ] 入力データのバックエンドへの送信処理実装
            - [ ] 入力中のプレビュー機能の実装
            - [ ] エラーハンドリングとユーザーフィードバックのUI実装

        - title: ツリー表示機能の実装
          labels: [feature, frontend]
          description: |
            バックエンド：
            - [ ] ツリー構造データの効率的な取得クエリ実装
            - [ ] データの階層構造を維持したレスポンス形式の設計
            
            フロントエンド：
            - [ ] ツリービューコンポーネントの作成
              - [ ] 再帰的なノード表示機能
              - [ ] 展開・縮小機能
            - [ ] ツリーデータの取得と表示ロジックの実装
            - [ ] ツリーノードの選択機能実装
            - [ ] 選択ノードの詳細情報表示
            - [ ] ツリーの操作機能実装
              - [ ] ノードの追加
              - [ ] ノードの削除
              - [ ] ノードの移動
            - [ ] パフォーマンス最適化（仮想化リストの使用）

        - title: 局面詳細表示の実装
          labels: [feature, frontend]
          description: |
            バックエンド：
            - [ ] 局面詳細データの取得クエリ最適化
            - [ ] 関連する次の手のデータ取得機能実装
            
            フロントエンド：
            - [ ] 局面情報表示コンポーネントの作成
              - [ ] 駒の配置図の視覚化
              - [ ] 手番、手数などの基本情報表示
            - [ ] 次の手の一覧表示機能の実装
            - [ ] 評価値の表示（やねうら王からの取得）
            - [ ] 類似局面へのリンク機能
            - [ ] 局面の編集機能実装
              - [ ] 駒の移動
              - [ ] 駒の追加
              - [ ] 駒の削除

        - title: 簡易検索機能の実装
          labels: [feature, backend, frontend]
          description: |
            バックエンド：
            - [ ] 基本的な検索クエリの実装
              - [ ] 局面検索
              - [ ] 手順検索
              - [ ] 定跡検索
            - [ ] 全文検索機能の実装（定跡名、コメントなど）
            - [ ] 検索結果のページネーション処理
            
            フロントエンド：
            - [ ] 検索フォームコンポーネントの作成
              - [ ] 複数の検索条件入力フィールド
              - [ ] オートコンプリート機能
            - [ ] 検索結果表示コンポーネントの作成
              - [ ] 結果のリスト表示
              - [ ] ページネーションUI
            - [ ] 検索条件の保存と再利用機能

        - title: MVPの統合とテスト
          labels: [testing, integration]
          description: |
            - [ ] 各機能の統合：
              - [ ] 棋譜入力機能とツリー表示機能の連携確認
              - [ ] ツリー表示と局面詳細表示の連携確認
              - [ ] 検索機能と他の全ての機能との連携確認
            - [ ] 全体的なデータフローの確認：
              - [ ] バックエンドからフロントエンドへのデータ伝達の検証
              - [ ] ユーザー操作によるデータ更新の検証
            - [ ] パフォーマンステストの実施：
              - [ ] 大量の棋譜データでの動作確認
              - [ ] 複雑な検索クエリの応答時間測定
              - [ ] ボトルネックの特定と最適化
            - [ ] クロスブラウザテスト：
              - [ ] Chrome での動作確認
              - [ ] Firefox での動作確認
              - [ ] Safari での動作確認
              - [ ] Edge での動作確認
              - [ ] レスポンシブデザインの確認（モバイル、タブレット、デスクトップ）
            - [ ] ユーザビリティテスト：
              - [ ] 3-5名のテストユーザーによる操作確認
              - [ ] フィードバックの収集
              - [ ] 重要なフィードバックの反映
            - [ ] セキュリティチェック：
              - [ ] 入力値のバリデーション確認
              - [ ] クロスサイトスクリプティング（XSS）対策の確認
              - [ ] API エンドポイントのセキュリティ確認
            - [ ] エラーハンドリングの総合チェック：
              - [ ] 予期せぬ入力に対する適切なエラーメッセージ表示
              - [ ] ネットワークエラー時の適切な処理
              - [ ] バックエンドエラーのフロントエンドでの適切な処理
            - [ ] ドキュメントの更新：
              - [ ] README.md の更新（最新の機能リストと使用方法）
              - [ ] API ドキュメントの作成・更新
              - [ ] ユーザーガイドの作成（基本的な使用方法の説明）
            - [ ] デプロイ準備：
              - [ ] 本番環境の構築（サーバーのセットアップ）
              - [ ] 環境変数の設定
              - [ ] デプロイスクリプトの作成
              - [ ] テスト環境でのデプロイ検証
